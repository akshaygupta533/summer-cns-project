library('scater')
########################Data collection######################
library(scater)
library(scran)
library(edgeR)
options(digits=3)
dge <- read10X(mtx="GSM2510617_P7-matrix.mtx.gz",genes="GSM2510617_P7-genes.tsv.gz",barcodes="GSM2510617_P7-barcodes.tsv.gz",path="Data",DGEList=TRUE)
###############Gene Annotation#########################
ann <- alias2SymbolUsingNCBI(dge$genes$Symbol,gene.info.file = 'Data/Mus_musculus.gene_info.gz',required.columns = c('GeneID','Symbol'))
dge$genes <- cbind(dge$genes, Official=ann$Symbol, GeneID=ann$GeneID)
###############Gene Annotation#########################
ann <- alias2SymbolUsingNCBI(dge$genes$Symbol,gene.info.file = 'Data/Mus_musculus.gene_info.gz',required.columns = c('GeneID','Symbol'))
dge$genes <- cbind(dge$genes, Official=ann$Symbol, GeneID=ann$GeneID)
############Quality control#################
#Get index of all genes which are mitochondrial
mito <-grep('^mt-',dge$genes$Symbol)
#Get percentage of "reads of" mitochondrial genes for each cell
percent.mito <- colSums(dge$counts[mito,]) / dge$samples$lib.size
#Get the number of genes which were mapped to at least 1 read for each cell
nGenes <- colSums(dge$counts != 0)
#Append nGenes and percent.mito to dge$samples
dge$samples <- cbind(dge$samples, percent.mito=percent.mito, nGenes=nGenes)
###########Scatter plots for percent.mito and nGenes#############
par(mfrow=c(1,2))
plot(dge$samples[,c("lib.size","nGenes")], pch=16, cex=0.7)
plot(dge$samples[,c("lib.size","percent.mito")], pch=16, cex=0.7)
########################Data collection######################
library(scater)
library(scran)
library(edgeR)
options(digits=3)
dge <- read10X(mtx="GSM2510617_P7-matrix.mtx.gz",genes="GSM2510617_P7-genes.tsv.gz",barcodes="GSM2510617_P7-barcodes.tsv.gz",path="Data",DGEList=TRUE)
###############Gene Annotation#########################
ann <- alias2SymbolUsingNCBI(dge$genes$Symbol,gene.info.file = 'Data/Mus_musculus.gene_info.gz',required.columns = c('GeneID','Symbol'))
dge$genes <- cbind(dge$genes, Official=ann$Symbol, GeneID=ann$GeneID)
############Quality control#################
#Get index of all genes which are mitochondrial
mito <-grep('^mt-',dge$genes$Symbol)
#Get percentage of "reads of" mitochondrial genes for each cell
percent.mito <- colSums(dge$counts[mito,]) / dge$samples$lib.size
#Get the number of genes which were mapped to at least 1 read for each cell
nGenes <- colSums(dge$counts != 0)
#Append nGenes and percent.mito to dge$samples
dge$samples <- cbind(dge$samples, percent.mito=percent.mito, nGenes=nGenes)
###########Scatter plots for percent.mito and nGenes#############
par(mfrow=c(1,2))
plot(dge$samples[,c("lib.size","nGenes")], pch=16, cex=0.7)
plot(dge$samples[,c("lib.size","percent.mito")], pch=16, cex=0.7)
######################Gene filtering#################################
o <- order(rowSums(dge$counts), decreasing=TRUE)
dge <- dge[o, ]
#Condition to remove genes expressed in less than 1% of total cells
keep1 <- rowSums(dge$counts > 0) >= ncol(dge)*0.01
#Condition to remove genes with no valid official symbols
keep2 <- !is.na(dge$genes$Official)
#condition to remove duplicate genes
keep3 <- !duplicated(dge$genes$Official)
keep <- keep1 & keep2 & keep3
dge <- dge[keep, ]
rownames(dge) <- dge$genes$Official
##############Creating a SingleCellExperiment object#####################
sce <- SingleCellExperiment(list(counts=dge$counts))
?scaledColRanks
clst <- quickCluster(sce, method="igraph", min.mean=0.5)
clst
table(clst)
sce <- computeSumFactors(sce, cluster=clst)
sizeFactors(sce)
View(sizeFactors(sce))
summary(sizeFactors(sce))
libSize <- dge$samples$lib.size
plot(libSize/1e3, sizeFactors(sce), log="xy", pch=16, cex=0.7, xlab="Library size (thousands)", ylab="Size factor")
########################Data collection######################
library(scater)
library(scran)
library(edgeR)
options(digits=3)
dge <- read10X(mtx="GSM2510617_P7-matrix.mtx.gz",genes="GSM2510617_P7-genes.tsv.gz",barcodes="GSM2510617_P7-barcodes.tsv.gz",path="Data",DGEList=TRUE)
###############Gene Annotation#########################
ann <- alias2SymbolUsingNCBI(dge$genes$Symbol,gene.info.file = 'Data/Mus_musculus.gene_info.gz',required.columns = c('GeneID','Symbol'))
dge$genes <- cbind(dge$genes, Official=ann$Symbol, GeneID=ann$GeneID)
############Quality control#################
#Get index of all genes which are mitochondrial
mito <-grep('^mt-',dge$genes$Symbol)
#Get percentage of "reads of" mitochondrial genes for each cell
percent.mito <- colSums(dge$counts[mito,]) / dge$samples$lib.size
#Get the number of genes which were mapped to at least 1 read for each cell
nGenes <- colSums(dge$counts != 0)
#Append nGenes and percent.mito to dge$samples
dge$samples <- cbind(dge$samples, percent.mito=percent.mito, nGenes=nGenes)
###########Scatter plots for percent.mito and nGenes#############
par(mfrow=c(1,2))
plot(dge$samples[,c("lib.size","nGenes")], pch=16, cex=0.7)
plot(dge$samples[,c("lib.size","percent.mito")], pch=16, cex=0.7)
######################Gene filtering#################################
o <- order(rowSums(dge$counts), decreasing=TRUE)
dge <- dge[o, ]
#Condition to remove genes expressed in less than 1% of total cells
keep1 <- rowSums(dge$counts > 0) >= ncol(dge)*0.01
#Condition to remove genes with no valid official symbols
keep2 <- !is.na(dge$genes$Official)
#condition to remove duplicate genes
keep3 <- !duplicated(dge$genes$Official)
keep <- keep1 & keep2 & keep3
dge <- dge[keep, ]
rownames(dge) <- dge$genes$Official
##############Creating a SingleCellExperiment object#####################
sce <- SingleCellExperiment(list(counts=dge$counts))
################Normalization################################
clst <- quickCluster(sce, method="igraph", min.mean=0.5)
sce <- computeSumFactors(sce, cluster=clst)
libSize <- dge$samples$lib.size
plot(libSize/1e3, sizeFactors(sce), log="xy", pch=16, cex=0.7, xlab="Library size (thousands)", ylab="Size factor")
sce <- normalize(sce)
library(BiocFileCache)
install.packages(c("BioFileCache"))
install.packages(c("BiocFileCache"))
install.packages(c(BiocFileCache))
install.packages(c("BiocFileCache"))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version='devel')
BiocManager::install("BiocFileCache")
library(BiocFileCache)
BiocManager::install(c("openssl","httr","BiocFileCache")
)
install.packages("openssl")
install.packages("openssl")
install.packages("httr")
BiocManager::install("BiocFileCache")
library(BiocFileCache)
bfc <- BiocFileCache("raw_data", ask = FALSE)
lun.zip <- bfcrpath(bfc,
file.path("https://www.ebi.ac.uk/arrayexpress/files",
"E-MTAB-5522/E-MTAB-5522.processed.1.zip"))
lun.sdrf <- bfcrpath(bfc,
file.path("https://www.ebi.ac.uk/arrayexpress/files",
"E-MTAB-5522/E-MTAB-5522.sdrf.txt"))
unzip(lun.zip, exdir=tempdir())
tempdir()
lun.sdrf <- bfcrpath(bfc,
file.path("https://www.ebi.ac.uk/arrayexpress/files",
"E-MTAB-5522/E-MTAB-5522.sdrf.txt"))
library(BiocFileCache)
bfc <- BiocFileCache("raw_data", ask = FALSE)
lun.zip <- bfcrpath(bfc,
file.path("https://www.ebi.ac.uk/arrayexpress/files",
"E-MTAB-5522/E-MTAB-5522.processed.1.zip"))
unzip(lun.zip, exdir=tempdir())
tempdir()
plate1 <- read.delim(file.path(tempdir(), "counts_Calero_20160113.tsv"),
header=TRUE, row.names=1, check.names=FALSE)
plate2 <- read.delim(file.path(tempdir(), "counts_Calero_20160325.tsv"),
header=TRUE, row.names=1, check.names=FALSE)
gene.lengths <- plate1$Length # First column is the gene length.
plate1 <- as.matrix(plate1[,-1]) # Discarding gene length (as it is not a cell).
plate2 <- as.matrix(plate2[,-1])
rbind(Plate1=dim(plate1), Plate2=dim(plate2))
plate1 <- read.delim(file.path(tempdir(), "counts_Calero_20160113.tsv"),
header=TRUE, row.names=1, check.names=FALSE)
plate2 <- read.delim(file.path(tempdir(), "counts_Calero_20160325.tsv"),
header=TRUE, row.names=1, check.names=FALSE)
gene.lengths <- plate1$Length # First column is the gene length.
plate1 <- as.matrix(plate1[,-1]) # Discarding gene length (as it is not a cell).
plate2 <- as.matrix(plate2[,-1])
#rbind(Plate1=dim(plate1), Plate2=dim(plate2))
plate1 <- read.delim(file.path(tempdir(), "counts_Calero_20160113.tsv"),
header=TRUE, row.names=1, check.names=FALSE)
plate2 <- read.delim(file.path(tempdir(), "counts_Calero_20160325.tsv"),
header=TRUE, row.names=1, check.names=FALSE)
gene.lengths <- plate1$Length # First column is the gene length.
plate1 <- as.matrix(plate1[,-1]) # Discarding gene length (as it is not a cell).
plate2 <- as.matrix(plate2[,-1])
rbind(Plate1=dim(plate1), Plate2=dim(plate2))
stopifnot(identical(rownames(plate1), rownames(plate2)))
all.counts <- cbind(plate1, plate2)
View(all.counts)
View(plate1)
tmp <-rbind(Plate1=dim(plate1), Plate2=dim(plate2))
View(tmp)
library(BiocFileCache)
bfc <- BiocFileCache("raw_data", ask = FALSE)
lun.zip <- bfcrpath(bfc,
file.path("https://www.ebi.ac.uk/arrayexpress/files",
"E-MTAB-5522/E-MTAB-5522.processed.1.zip"))
lun.sdrf <- bfcrpath(bfc,
file.path("https://www.ebi.ac.uk/arrayexpress/files",
"E-MTAB-5522/E-MTAB-5522.sdrf.txt"))
unzip(lun.zip, exdir=tempdir())
plate1 <- read.delim(file.path(tempdir(), "counts_Calero_20160113.tsv"),
header=TRUE, row.names=1, check.names=FALSE)
plate2 <- read.delim(file.path(tempdir(), "counts_Calero_20160325.tsv"),
header=TRUE, row.names=1, check.names=FALSE)
gene.lengths <- plate1$Length # First column is the gene length.
plate1 <- as.matrix(plate1[,-1]) # Discarding gene length (as it is not a cell).
plate2 <- as.matrix(plate2[,-1])
rbind(Plate1=dim(plate1), Plate2=dim(plate2))
View(plate2)
library(SingleCellExperiment)
sce <- SingleCellExperiment(list(counts=all.counts))
rowData(sce)$GeneLength <- gene.lengths
sce
isSpike(sce, "ERCC") <- grepl("^ERCC", rownames(sce))
#storing the ERCC spike ins separately in the sce object
summary(isSpike(sce, "ERCC"))
View(sce)
sce
View(sce)
sce
is.sirv <- grepl("^SIRV", rownames(sce))
sce <- sce[!is.sirv,]
#Removing sirv spike ins
summary(is.sirv)
View(sce)
sce
read.delim(lun.sdrf, check.names=FALSE, header=TRUE)
read.delim(lun.sdrf, check.names=FALSE, header=TRUE)
library(BiocFileCache)
bfc <- BiocFileCache("raw_data", ask = FALSE)
lun.zip <- bfcrpath(bfc,
file.path("https://www.ebi.ac.uk/arrayexpress/files",
"E-MTAB-5522/E-MTAB-5522.processed.1.zip"))
lun.sdrf <- bfcrpath(bfc,
file.path("https://www.ebi.ac.uk/arrayexpress/files",
"E-MTAB-5522/E-MTAB-5522.sdrf.txt"))
unzip(lun.zip, exdir=tempdir())
plate1 <- read.delim(file.path(tempdir(), "counts_Calero_20160113.tsv"),
header=TRUE, row.names=1, check.names=FALSE)
plate2 <- read.delim(file.path(tempdir(), "counts_Calero_20160325.tsv"),
header=TRUE, row.names=1, check.names=FALSE)
gene.lengths <- plate1$Length # First column is the gene length.
plate1 <- as.matrix(plate1[,-1]) # Discarding gene length (as it is not a cell).
plate2 <- as.matrix(plate2[,-1])
rbind(Plate1=dim(plate1), Plate2=dim(plate2))
stopifnot(identical(rownames(plate1), rownames(plate2)))
all.counts <- cbind(plate1, plate2)
library(SingleCellExperiment)
sce <- SingleCellExperiment(list(counts=all.counts))
rowData(sce)$GeneLength <- gene.lengths
sce
isSpike(sce, "ERCC") <- grepl("^ERCC", rownames(sce))
#storing the ERCC spike ins separately in the sce object
summary(isSpike(sce, "ERCC"))
isSpike(sce, "ERCC") <- grepl("^ERCC", rownames(sce))
#storing the ERCC spike ins separately in the sce object
summary(isSpike(sce, "ERCC"))
is.sirv <- grepl("^SIRV", rownames(sce))
sce <- sce[!is.sirv,]
summary(is.sirv)
is.sirv <- grepl("^SIRV", rownames(sce))
sce <- sce[!is.sirv,]
#Removing sirv spike ins
summary(is.sirv)
read.delim(lun.sdrf, check.names=FALSE, header=TRUE)
read.delim(lun.sdrf, check.names=FALSE, header=TRUE)
lun.sdrf
lun.sdrf
setwd("~/summer-cns-project/RNA-seq2")
lun.sdrf
read.delim(lun.sdrf, check.names=FALSE, header=TRUE)
metadata <- read.delim(lun.sdrf, check.names=FALSE, header=TRUE)
View(metadata)
View(metadata)
View(bfc)
sce@assays@data@listData[["counts"]]
View(sce@assays@data@listData[["counts"]])
